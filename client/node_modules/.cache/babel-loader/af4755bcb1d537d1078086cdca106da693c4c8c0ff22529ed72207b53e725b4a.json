{"ast":null,"code":"import { Buffer } from \"buffer\";\nexport default class Data {\n  /**\n   *\n   * @param {string} path - path that replaces url path section\n   * @param {string} method - describes HTTP method: get, post, put, delete,\n   * @param {object} body - object that is passed for post and put requests\n   * @param {boolean} requiresAuth - determines if authorization is needed\n   * @param {object} credentials - credentials passed in authorization header\n   * @returns\n   */\n  api(path) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let requiresAuth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let credentials = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    const url = `http://localhost:5000/api${path}`;\n    const options = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    };\n    if (body !== null) {\n      options.body = JSON.stringify(body);\n    }\n    if (requiresAuth) {\n      const encodedCredentials = Buffer.from(`${credentials.username}:${credentials.password}`).toString(\"base64\");\n      options.headers[\"Authorization\"] = `Basic ${encodedCredentials}`;\n    }\n    return fetch(url, options);\n  }\n\n  //------------------------------HELPER FUNCTIONS: USER --------------------------------//\n  async getUser(username, password) {\n    const response = await this.api(`/users`, \"GET\", null, true, {\n      username,\n      password\n    });\n    if (response.status === 200) {\n      return response.json().then(data => data);\n    } else if (response.status === 401) {\n      return null;\n    } else {\n      throw new Error();\n    }\n  }\n  async createUser(user) {\n    const response = await this.api(\"/users\", \"POST\", user);\n    if (response.status === 201) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data.errors;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n\n  //----------------------------HELPER FUNCTIONS: COURSES----------------------------------//\n  async getCourses() {\n    const response = await this.api(\"/courses\", \"GET\");\n    if (response.status === 200) {\n      return response.json().then(data => data);\n    } else {\n      throw new Error();\n    }\n  }\n  async getCourse(id) {\n    const response = await this.api(`/courses/${id}`, \"GET\");\n    if (response.status === 200) {\n      return response.json().then(data => data);\n    } else if (response.status === 404) {\n      throw new Error(\"404\");\n    } else {\n      throw new Error(\"505\");\n    }\n  }\n  async createCourse(body, username, password) {\n    const response = await this.api(`/courses`, \"POST\", body, true, {\n      username,\n      password\n    });\n    if (response.status === 201) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data.errors;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n  async updateCourse(id, body, username, password) {\n    const response = await this.api(`/courses/${id}`, \"PUT\", body, true, {\n      username,\n      password\n    });\n    if (response.status === 204) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then(data => {\n        return data.errors;\n      });\n    } else if (response.status === 404) {\n      throw new Error(\"404\");\n    } else {\n      throw new Error(\"505\");\n    }\n  }\n  async deleteCourse(id, username, password) {\n    const response = await this.api(`/courses/${id}`, \"DELETE\", null, true, {\n      username,\n      password\n    });\n    if (response.status === 204) {\n      console.log(\"deleted\");\n    } else {\n      throw new Error();\n    }\n  }\n}","map":{"version":3,"names":["Buffer","Data","api","path","method","body","requiresAuth","credentials","url","options","headers","JSON","stringify","encodedCredentials","from","username","password","toString","fetch","getUser","response","status","json","then","data","Error","createUser","user","errors","getCourses","getCourse","id","createCourse","updateCourse","deleteCourse","console","log"],"sources":["/Users/sabdullahi/Desktop/projects /project-10-react_resptapi/client/src/Data.js"],"sourcesContent":["import { Buffer } from \"buffer\";\n\nexport default class Data {\n  /**\n   *\n   * @param {string} path - path that replaces url path section\n   * @param {string} method - describes HTTP method: get, post, put, delete,\n   * @param {object} body - object that is passed for post and put requests\n   * @param {boolean} requiresAuth - determines if authorization is needed\n   * @param {object} credentials - credentials passed in authorization header\n   * @returns\n   */\n  api(\n    path,\n    method = \"GET\",\n    body = null,\n    requiresAuth = false,\n    credentials = null\n  ) {\n    const url = `http://localhost:5000/api${path}`;\n\n    const options = {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n      },\n    };\n\n    if (body !== null) {\n      options.body = JSON.stringify(body);\n    }\n\n    if (requiresAuth) {\n      const encodedCredentials = Buffer.from(\n        `${credentials.username}:${credentials.password}`\n      ).toString(\"base64\");\n      options.headers[\"Authorization\"] = `Basic ${encodedCredentials}`;\n    }\n    return fetch(url, options);\n  }\n\n  //------------------------------HELPER FUNCTIONS: USER --------------------------------//\n  async getUser(username, password) {\n    const response = await this.api(`/users`, \"GET\", null, true, {\n      username,\n      password,\n    });\n    if (response.status === 200) {\n      return response.json().then((data) => data);\n    } else if (response.status === 401) {\n      return null;\n    } else {\n      throw new Error();\n    }\n  }\n\n  async createUser(user) {\n    const response = await this.api(\"/users\", \"POST\", user);\n    if (response.status === 201) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then((data) => {\n        return data.errors;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n\n  //----------------------------HELPER FUNCTIONS: COURSES----------------------------------//\n  async getCourses() {\n    const response = await this.api(\"/courses\", \"GET\");\n    if (response.status === 200) {\n      return response.json().then((data) => data);\n    } else {\n      throw new Error();\n    }\n  }\n\n  async getCourse(id) {\n    const response = await this.api(`/courses/${id}`, \"GET\");\n\n    if (response.status === 200) {\n      return response.json().then((data) => data);\n    } else if (response.status === 404) {\n      throw new Error(\"404\");\n    } else {\n      throw new Error(\"505\");\n    }\n  }\n  async createCourse(body, username, password) {\n    const response = await this.api(`/courses`, \"POST\", body, true, {\n      username,\n      password,\n    });\n    if (response.status === 201) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then((data) => {\n        return data.errors;\n      });\n    } else {\n      throw new Error();\n    }\n  }\n\n  async updateCourse(id, body, username, password) {\n    const response = await this.api(`/courses/${id}`, \"PUT\", body, true, {\n      username,\n      password,\n    });\n    if (response.status === 204) {\n      return [];\n    } else if (response.status === 400) {\n      return response.json().then((data) => {\n        return data.errors;\n      });\n    } else if (response.status === 404) {\n      throw new Error(\"404\");\n    } else {\n      throw new Error(\"505\");\n    }\n  }\n\n  async deleteCourse(id, username, password) {\n    const response = await this.api(`/courses/${id}`, \"DELETE\", null, true, {\n      username,\n      password,\n    });\n\n    if (response.status === 204) {\n      console.log(\"deleted\");\n    } else {\n      throw new Error();\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}